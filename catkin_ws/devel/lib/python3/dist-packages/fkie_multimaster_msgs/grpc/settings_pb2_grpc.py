# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from fkie_multimaster_msgs.grpc import settings_pb2 as fkie__multimaster__msgs_dot_grpc_dot_settings__pb2


class SettingsServiceStub(object):
  """System and ROS monitor service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetConfig = channel.unary_unary(
        '/fkie_multimaster_msgs.settings.SettingsService/GetConfig',
        request_serializer=fkie__multimaster__msgs_dot_grpc_dot_settings__pb2.Filter.SerializeToString,
        response_deserializer=fkie__multimaster__msgs_dot_grpc_dot_settings__pb2.Yaml.FromString,
        )
    self.SetConfig = channel.unary_unary(
        '/fkie_multimaster_msgs.settings.SettingsService/SetConfig',
        request_serializer=fkie__multimaster__msgs_dot_grpc_dot_settings__pb2.Yaml.SerializeToString,
        response_deserializer=fkie__multimaster__msgs_dot_grpc_dot_settings__pb2.Empty.FromString,
        )


class SettingsServiceServicer(object):
  """System and ROS monitor service definition.
  """

  def GetConfig(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetConfig(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SettingsServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetConfig': grpc.unary_unary_rpc_method_handler(
          servicer.GetConfig,
          request_deserializer=fkie__multimaster__msgs_dot_grpc_dot_settings__pb2.Filter.FromString,
          response_serializer=fkie__multimaster__msgs_dot_grpc_dot_settings__pb2.Yaml.SerializeToString,
      ),
      'SetConfig': grpc.unary_unary_rpc_method_handler(
          servicer.SetConfig,
          request_deserializer=fkie__multimaster__msgs_dot_grpc_dot_settings__pb2.Yaml.FromString,
          response_serializer=fkie__multimaster__msgs_dot_grpc_dot_settings__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'fkie_multimaster_msgs.settings.SettingsService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
